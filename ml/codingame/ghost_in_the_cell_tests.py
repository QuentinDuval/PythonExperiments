from ml.codingame.ghost_in_the_cell import *


"""
GRAPH
defaultdict(<class 'dict'>, {0: {1: 4, 2: 4, 3: 1, 4: 1, 5: 5, 6: 5, 7: 7, 8: 7, 9: 7, 10: 7, 11: 2, 12: 2, 13: 4, 14: 4}, 1: {0: 4, 2: 10, 3: 2, 4: 7, 5: 1, 6: 10, 7: 1, 8: 13, 9: 2, 10: 13, 11: 4, 12: 6, 13: 1, 14: 9}, 2: {0: 4, 1: 10, 3: 7, 4: 2, 5: 10, 6: 1, 7: 13, 8: 1, 9: 13, 10: 2, 11: 6, 12: 4, 13: 9, 14: 1}, 3: {0: 1, 1: 2, 2: 7, 4: 4, 5: 2, 6: 8, 7: 5, 8: 9, 9: 5, 10: 10, 11: 3, 12: 3, 13: 3, 14: 5}, 4: {0: 1, 1: 7, 2: 2, 3: 4, 5: 8, 6: 2, 7: 9, 8: 5, 9: 10, 10: 5, 11: 3, 12: 3, 13: 5, 14: 3}, 5: {0: 5, 1: 1, 2: 10, 3: 2, 4: 8, 6: 11, 7: 3, 8: 13, 9: 1, 10: 14, 11: 6, 12: 6, 13: 4, 14: 9}, 6: {0: 5, 1: 10, 2: 1, 3: 8, 4: 2, 5: 11, 7: 13, 8: 3, 9: 14, 10: 1, 11: 6, 12: 6, 13: 9, 14: 4}, 7: {0: 7, 1: 1, 2: 13, 3: 5, 4: 9, 5: 3, 6: 13, 8: 15, 9: 2, 10: 15, 11: 6, 12: 9, 13: 3, 14: 12}, 8: {0: 7, 1: 13, 2: 1, 3: 9, 4: 5, 5: 13, 6: 3, 7: 15, 9: 15, 10: 2, 11: 9, 12: 6, 13: 12, 14: 3}, 9: {0: 7, 1: 2, 2: 13, 3: 5, 4: 10, 5: 1, 6: 14, 7: 2, 8: 15, 10: 16, 11: 8, 12: 9, 13: 5, 14: 11}, 10: {0: 7, 1: 13, 2: 2, 3: 10, 4: 5, 5: 14, 6: 1, 7: 15, 8: 2, 9: 16, 11: 9, 12: 8, 13: 11, 14: 5}, 11: {0: 2, 1: 4, 2: 6, 3: 3, 4: 3, 5: 6, 6: 6, 7: 6, 8: 9, 9: 8, 10: 9, 12: 6, 13: 1, 14: 7}, 12: {0: 2, 1: 6, 2: 4, 3: 3, 4: 3, 5: 6, 6: 6, 7: 9, 8: 6, 9: 9, 10: 8, 11: 6, 13: 7, 14: 1}, 13: {0: 4, 1: 1, 2: 9, 3: 3, 4: 5, 5: 4, 6: 9, 7: 3, 8: 12, 9: 5, 10: 11, 11: 1, 12: 7, 14: 9}, 14: {0: 4, 1: 9, 2: 1, 3: 5, 4: 3, 5: 9, 6: 4, 7: 12, 8: 3, 9: 11, 10: 5, 11: 7, 12: 1, 13: 9}})
PATHS
defaultdict(<class 'dict'>, {0: {0: 0, 1: 3, 2: 4, 3: 3, 4: 4, 5: 3, 6: 4, 7: 3, 8: 4, 9: 5, 10: 6, 11: 11, 12: 12, 13: 11, 14: 12}, 1: {1: 0, 0: 3, 2: 4, 3: 3, 4: 3, 5: 5, 6: 4, 7: 7, 8: 4, 9: 5, 10: 6, 11: 13, 12: 3, 13: 13, 14: 12}, 2: {2: 0, 0: 4, 1: 4, 3: 4, 4: 4, 5: 4, 6: 6, 7: 4, 8: 8, 9: 5, 10: 6, 11: 4, 12: 14, 13: 11, 14: 14}, 3: {3: 0, 0: 0, 1: 1, 2: 4, 4: 0, 5: 5, 6: 4, 7: 1, 8: 4, 9: 5, 10: 6, 11: 0, 12: 0, 13: 1, 14: 12}, 4: {4: 0, 0: 0, 1: 3, 2: 2, 3: 0, 5: 3, 6: 6, 7: 3, 8: 2, 9: 5, 10: 6, 11: 0, 12: 0, 13: 11, 14: 2}, 5: {5: 0, 0: 3, 1: 1, 2: 4, 3: 3, 4: 3, 6: 4, 7: 1, 8: 4, 9: 9, 10: 6, 11: 13, 12: 3, 13: 1, 14: 12}, 6: {6: 0, 0: 4, 1: 4, 2: 2, 3: 4, 4: 4, 5: 4, 7: 4, 8: 2, 9: 5, 10: 10, 11: 4, 12: 14, 13: 11, 14: 2}, 7: {7: 0, 0: 3, 1: 1, 2: 4, 3: 1, 4: 3, 5: 1, 6: 4, 8: 4, 9: 5, 10: 6, 11: 13, 12: 3, 13: 1, 14: 12}, 8: {8: 0, 0: 4, 1: 4, 2: 2, 3: 4, 4: 2, 5: 4, 6: 2, 7: 4, 9: 5, 10: 6, 11: 4, 12: 14, 13: 11, 14: 2}, 9: {9: 0, 0: 5, 1: 5, 2: 5, 3: 5, 4: 5, 5: 5, 6: 5, 7: 5, 8: 5, 10: 6, 11: 13, 12: 5, 13: 5, 14: 12}, 10: {10: 0, 0: 6, 1: 6, 2: 6, 3: 6, 4: 6, 5: 6, 6: 6, 7: 6, 8: 6, 9: 6, 11: 6, 12: 14, 13: 11, 14: 6}, 11: {11: 0, 0: 0, 1: 13, 2: 4, 3: 0, 4: 0, 5: 13, 6: 4, 7: 13, 8: 4, 9: 13, 10: 6, 12: 0, 13: 13, 14: 12}, 12: {12: 0, 0: 0, 1: 3, 2: 14, 3: 0, 4: 0, 5: 3, 6: 14, 7: 3, 8: 14, 9: 5, 10: 14, 11: 0, 13: 11, 14: 14}, 13: {13: 0, 0: 11, 1: 1, 2: 11, 3: 1, 4: 11, 5: 1, 6: 11, 7: 1, 8: 11, 9: 5, 10: 11, 11: 11, 12: 11, 14: 12}, 14: {14: 0, 0: 12, 1: 12, 2: 2, 3: 12, 4: 2, 5: 12, 6: 2, 7: 12, 8: 2, 9: 12, 10: 6, 11: 12, 12: 12, 13: 12}})
"""


def test_topology_next_hops():
    g = {0: {1: 4, 2: 7},
         1: {0: 4, 2: 4},
         2: {0: 7, 1: 4}}
    topology = Topology.from_graph(g)
    assert topology.next_move_hop(0, 1) == 1
    assert topology.next_move_hop(0, 2) == 1


def test_topology_camps():
    """
        1       4
    0       3       6
        2       5
    """
    edges = [
        [0, 1, 4],
        [0, 2, 5],
        [0, 3, 8],
        [1, 3, 5],
        [2, 3, 4],
        [6, 4, 4],
        [6, 5, 5],
        [6, 3, 8],
        [4, 3, 5],
        [5, 3, 4]
    ]
    topology = Topology.from_edges(edges)

    game_state = GameState(turn_nb=1)
    game_state.factories[0] = Factory(owner=1, cyborg_count=10, production=10)
    game_state.factories[6] = Factory(owner=-1, cyborg_count=10, production=10)
    topology.compute_camps(game_state)
    assert topology.get_camp(0) == 1
    assert topology.get_camp(1) == 1
    assert topology.get_camp(2) == 1
    assert topology.get_camp(4) == -1
    assert topology.get_camp(5) == -1
    assert topology.get_camp(6) == -1
    assert topology.get_camp(3) == 0


def run_unit_tests():
    test_topology_next_hops()
    test_topology_camps()


if __name__ == '__main__':
    run_unit_tests()

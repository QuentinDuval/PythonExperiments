from ml.codingame.ghost_in_the_cell import *


def test_topology_next_hops():
    """
    0 - 1 - 2
    """

    g = {0: {1: 4, 2: 7},
         1: {0: 4, 2: 4},
         2: {0: 7, 1: 4}}
    topology = Topology.from_graph(g)
    assert topology.next_move_hop(0, 1) == 1
    assert topology.next_move_hop(0, 2) == 1

    """
        1       4
    0       3       6
        2       5
    """
    edges = [
        [0, 1, 4],
        [0, 2, 5],
        [0, 3, 8],
        [1, 3, 5],
        [2, 3, 4],
        [6, 4, 4],
        [6, 5, 5],
        [6, 3, 8],
        [4, 3, 5],
        [5, 3, 4]
    ]
    topology = Topology.from_edges(edges)
    assert topology.next_move_hop(0, 3) == 1
    assert topology.next_move_hop(0, 2) == 2
    # assert topology.next_move_hop(0, 6) == 2


def test_topology_next_hops_real():
    """
    GRAPH
    defaultdict(<class 'dict'>, {0: {1: 6, 2: 6, 3: 7, 4: 7, 5: 7, 6: 7, 7: 1, 8: 1, 9: 2, 10: 2, 11: 3, 12: 3}, 1: {0: 6, 2: 14, 3: 1, 4: 15, 5: 4, 6: 14, 7: 4, 8: 9, 9: 4, 10: 9, 11: 2, 12: 11}, 2: {0: 6, 1: 14, 3: 15, 4: 1, 5: 14, 6: 4, 7: 9, 8: 4, 9: 9, 10: 4, 11: 11, 12: 2}, 3: {0: 7, 1: 1, 2: 15, 4: 16, 5: 2, 6: 15, 7: 5, 8: 10, 9: 5, 10: 10, 11: 3, 12: 12}, 4: {0: 7, 1: 15, 2: 1, 3: 16, 5: 15, 6: 2, 7: 10, 8: 5, 9: 10, 10: 5, 11: 12, 12: 3}, 5: {0: 7, 1: 4, 2: 14, 3: 2, 4: 15, 6: 15, 7: 6, 8: 9, 9: 4, 10: 10, 11: 3, 12: 11}, 6: {0: 7, 1: 14, 2: 4, 3: 15, 4: 2, 5: 15, 7: 9, 8: 6, 9: 10, 10: 4, 11: 11, 12: 3}, 7: {0: 1, 1: 4, 2: 9, 3: 5, 4: 10, 5: 6, 6: 9, 8: 4, 9: 2, 10: 4, 11: 1, 12: 6}, 8: {0: 1, 1: 9, 2: 4, 3: 10, 4: 5, 5: 9, 6: 6, 7: 4, 9: 4, 10: 2, 11: 6, 12: 1}, 9: {0: 2, 1: 4, 2: 9, 3: 5, 4: 10, 5: 4, 6: 10, 7: 2, 8: 4, 10: 5, 11: 1, 12: 6}, 10: {0: 2, 1: 9, 2: 4, 3: 10, 4: 5, 5: 10, 6: 4, 7: 4, 8: 2, 9: 5, 11: 6, 12: 1}, 11: {0: 3, 1: 2, 2: 11, 3: 3, 4: 12, 5: 3, 6: 11, 7: 1, 8: 6, 9: 1, 10: 6, 12: 8}, 12: {0: 3, 1: 11, 2: 2, 3: 12, 4: 3, 5: 11, 6: 3, 7: 6, 8: 1, 9: 6, 10: 1, 11: 8}})
    PATHS
    defaultdict(<class 'dict'>, {0: {0: 0, 1: 11, 2: 12, 3: 11, 4: 12, 5: 11, 6: 12, 7: 7, 8: 8, 9: 11, 10: 12, 11: 7, 12: 8}, 1: {1: 0, 0: 11, 2: 12, 3: 3, 4: 12, 5: 3, 6: 12, 7: 11, 8: 11, 9: 11, 10: 12, 11: 11, 12: 11}, 2: {2: 0, 0: 12, 1: 12, 3: 12, 4: 4, 5: 12, 6: 4, 7: 12, 8: 12, 9: 12, 10: 12, 11: 12, 12: 12}, 3: {3: 0, 0: 11, 1: 1, 2: 12, 4: 12, 5: 5, 6: 12, 7: 11, 8: 11, 9: 11, 10: 12, 11: 1, 12: 11}, 4: {4: 0, 0: 12, 1: 12, 2: 2, 3: 12, 5: 12, 6: 6, 7: 12, 8: 12, 9: 12, 10: 12, 11: 12, 12: 2}, 5: {5: 0, 0: 11, 1: 3, 2: 12, 3: 3, 4: 12, 6: 12, 7: 11, 8: 11, 9: 11, 10: 12, 11: 11, 12: 11}, 6: {6: 0, 0: 12, 1: 12, 2: 4, 3: 12, 4: 4, 5: 12, 7: 12, 8: 12, 9: 12, 10: 12, 11: 12, 12: 12}, 7: {7: 0, 0: 0, 1: 11, 2: 12, 3: 11, 4: 12, 5: 11, 6: 12, 8: 0, 9: 11, 10: 12, 11: 11, 12: 8}, 8: {8: 0, 0: 0, 1: 11, 2: 12, 3: 11, 4: 12, 5: 11, 6: 12, 7: 0, 9: 11, 10: 12, 11: 7, 12: 12}, 9: {9: 0, 0: 11, 1: 11, 2: 12, 3: 11, 4: 12, 5: 11, 6: 12, 7: 11, 8: 11, 10: 12, 11: 11, 12: 11}, 10: {10: 0, 0: 12, 1: 12, 2: 12, 3: 12, 4: 12, 5: 12, 6: 12, 7: 12, 8: 12, 9: 12, 11: 12, 12: 12}, 11: {11: 0, 0: 7, 1: 1, 2: 12, 3: 1, 4: 12, 5: 5, 6: 12, 7: 7, 8: 7, 9: 9, 10: 12, 12: 8}, 12: {12: 0, 0: 8, 1: 11, 2: 2, 3: 11, 4: 2, 5: 11, 6: 6, 7: 8, 8: 8, 9: 11, 10: 10, 11: 8}})
    """
    g = {0: {1: 6, 2: 6, 3: 7, 4: 7, 5: 7, 6: 7, 7: 1, 8: 1, 9: 2, 10: 2, 11: 3, 12: 3},
         1: {0: 6, 2: 14, 3: 1, 4: 15, 5: 4, 6: 14, 7: 4, 8: 9, 9: 4, 10: 9, 11: 2, 12: 11},
         2: {0: 6, 1: 14, 3: 15, 4: 1, 5: 14, 6: 4, 7: 9, 8: 4, 9: 9, 10: 4, 11: 11, 12: 2},
         3: {0: 7, 1: 1, 2: 15, 4: 16, 5: 2, 6: 15, 7: 5, 8: 10, 9: 5, 10: 10, 11: 3, 12: 12},
         4: {0: 7, 1: 15, 2: 1, 3: 16, 5: 15, 6: 2, 7: 10, 8: 5, 9: 10, 10: 5, 11: 12, 12: 3},
         5: {0: 7, 1: 4, 2: 14, 3: 2, 4: 15, 6: 15, 7: 6, 8: 9, 9: 4, 10: 10, 11: 3, 12: 11},
         6: {0: 7, 1: 14, 2: 4, 3: 15, 4: 2, 5: 15, 7: 9, 8: 6, 9: 10, 10: 4, 11: 11, 12: 3},
         7: {0: 1, 1: 4, 2: 9, 3: 5, 4: 10, 5: 6, 6: 9, 8: 4, 9: 2, 10: 4, 11: 1, 12: 6},
         8: {0: 1, 1: 9, 2: 4, 3: 10, 4: 5, 5: 9, 6: 6, 7: 4, 9: 4, 10: 2, 11: 6, 12: 1},
         9: {0: 2, 1: 4, 2: 9, 3: 5, 4: 10, 5: 4, 6: 10, 7: 2, 8: 4, 10: 5, 11: 1, 12: 6},
         10: {0: 2, 1: 9, 2: 4, 3: 10, 4: 5, 5: 10, 6: 4, 7: 4, 8: 2, 9: 5, 11: 6, 12: 1},
         11: {0: 3, 1: 2, 2: 11, 3: 3, 4: 12, 5: 3, 6: 11, 7: 1, 8: 6, 9: 1, 10: 6, 12: 8},
         12: {0: 3, 1: 11, 2: 2, 3: 12, 4: 3, 5: 11, 6: 3, 7: 6, 8: 1, 9: 6, 10: 1, 11: 8}}
    topology = Topology.from_graph(g)
    assert topology.next_move_hop(1, 12) != 12
    assert topology.next_move_hop(1, 10) != 12


def test_topology_camps():
    """
        1       4
    0       3       6
        2       5
    """
    edges = [
        [0, 1, 4],
        [0, 2, 5],
        [0, 3, 8],
        [1, 3, 5],
        [2, 3, 4],
        [6, 4, 4],
        [6, 5, 5],
        [6, 3, 8],
        [4, 3, 5],
        [5, 3, 4]
    ]
    topology = Topology.from_edges(edges)

    game_state = GameState(turn_nb=1)
    game_state.factories[0] = Factory(owner=1, cyborg_count=10, production=10)
    game_state.factories[6] = Factory(owner=-1, cyborg_count=10, production=10)
    topology.compute_camps(game_state)
    assert topology.get_camp(0) == 1
    assert topology.get_camp(1) == 1
    assert topology.get_camp(2) == 1
    assert topology.get_camp(4) == -1
    assert topology.get_camp(5) == -1
    assert topology.get_camp(6) == -1
    assert topology.get_camp(3) == 0


def run_unit_tests():
    test_topology_next_hops()
    test_topology_next_hops_real()
    test_topology_camps()


if __name__ == '__main__':
    run_unit_tests()
